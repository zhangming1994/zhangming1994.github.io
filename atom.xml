<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵客缦胡缨，吴钩霜雪明</title>
  
  
  <link href="http://zhangming1994.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhangming1994.github.io/"/>
  <updated>2023-06-18T06:40:12.974Z</updated>
  <id>http://zhangming1994.github.io/</id>
  
  <author>
    <name>铁马冰河</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见并发模型</title>
    <link href="http://zhangming1994.github.io/2023/06/18/%E5%B8%B8%E8%A7%81%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    <id>http://zhangming1994.github.io/2023/06/18/%E5%B8%B8%E8%A7%81%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</id>
    <published>2023-06-18T06:25:29.000Z</published>
    <updated>2023-06-18T06:40:12.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见的并发模型-Fork-x2F-Join-Reactor-Proactor-Actor-CSP"><a href="#常见的并发模型-Fork-x2F-Join-Reactor-Proactor-Actor-CSP" class="headerlink" title="常见的并发模型[Fork&#x2F;Join   Reactor  Proactor   Actor  CSP]"></a>常见的并发模型[Fork&#x2F;Join   Reactor  Proactor   Actor  CSP]</h3><p>并发和并行都是相对于进程和线程来说的，并发是指一个或者若干个CPU对多个进程或者线程之间进行多路复用 就是cpu轮着执行多个任务 每个任务执行一段时间 并行则是指多个进程或者线程同一时刻被执行 是真正意义的同时执行 必须多个cpu的支持 </p><p>如果 对于并发来说 是线程一执行一段时间 二执行一段时间 三再执行一段时间 没个线程轮流的到cpu的执行时间 这种情况只需要一个cpu就可以实现 对于并行来说 线程一二三是同时执行 需要三个cpu ，当然 并发和并行都提升了cpu的资源利用效率<br>￼<br><img src="/img/concurrency1.png"></p><h4 id="关于并发模型"><a href="#关于并发模型" class="headerlink" title="关于并发模型"></a>关于并发模型</h4><p>拥有多个cpu的现代计算机 依靠并发并行机制能更快的执行任务 但是如何通过并发并行来执行一个任务也有多种不同的方式 就是不同的并发模型, 不同的并发模型对任务的拆分也是不同的 线程之间的通信方式也是不同的, 由于并发模型规定了任务描述 执行方式和线程协作等的总体框架 所以并发模型设计 需要考虑 如简化对任务的描述 让并发高效 让开发人员更加方便实现并发 </p><p>任务模型:<br>￼<br><img src="/img/2concurrency.png"></p><p>从进程与线程角度</p><p> 对于并发模型 如果我们从进程和线程的角度来看 主要有三种映射模式</p><ol><li>单进程-多线程</li><li>多进程-单线程</li><li>多进程-多线程<br>一般来说 进程的颗粒度大而且占用资源多 线程则是轻量级的 颗粒度小</li></ol><p>单进程-多线程<br>这种映射模式是指一个进程包含多个线程来执行任务 这是最常见的模式 一般来说 当线程数量少于cpu个数的时候 一个cpu对应一个线程 提高cpu的使用率 还有 多个线程共享进程内部资源 需要考虑线程安全问题 </p><p>￼<img src="/img/3concurrency.png"></p><p>多进程-单线程<br>这种映射模式是指多个进程共同执行处理任务 每个进程内部只有一个线程 也就是程序启动之后 主进程创建多个子进程 每个字进程对应一个线程 这种模式下不存在线程安全问题 因为每个线程之间相互隔离 进程内部只有一个线程不存在共享内存问题</p><p>￼<br>￼<img src="/img/4concurrency.png"></p><p>多进程-多线程<br>这个模式结合了前面两种模式 多个进程共同执行任务 每个进程包含多个线程 一个进程最多能够包含的线程数量是有限的 包含太多也可能导致性能下降 这时候就引入多个进程 就是多进程多线程模式 这种模式也需要考虑线程安全问题 进程和线程切换 一般认为这种模式增加了并发处理能力 特别是对于IO密集任务 但是更多的上下文切换 所以对cpu密集型任务处理能力不一定更高 </p><p>￼<br>￼<br>￼<img src="/img/concurrency5.png"></p><p>无状态的并发并行<br>为了使用并行并发机制 我们会把大任务拆分成小任务 当我们拆分后的任务不涉及共享状态的时候 无状态也就代表多个进程和线程不需要访问共享数据 这时候并发并行就简单 不需要考虑线程安全问题 </p><p>￼￼<br>￼<img src="/img/concurrency6.png"></p><p>共享状态问题<br>相对于无状态 并发并行的时候更多的是需要访问共享数据的情况 这个时候就存在共享状态问题 最常见的就是共享数据保存在内存当中 当然也可能保存在数据库或者其他存储系统上 一旦涉及到共享状态问题 就会涉及到竞争条件 死锁和并发问题 而且对共享状态的不同访问策略也可能影响执行的结果  而且 数据从内存到cpu中间会经历高速缓存和寄存器 这就扯出了数据可见性的问题 </p><p>上面是并发过程中多个线程会访问共享状态，而下面是并行过程中多个线程访问共享状态<br>￼<br>￼<br>￼<img src="/img/concurrency7.png"></p><h4 id="并发模型设计"><a href="#并发模型设计" class="headerlink" title="并发模型设计"></a>并发模型设计</h4><p>之前说并发模型设计需要考虑的主体是cpu和任务 并发模型则是规定了任务描述 执行方式和线程协作的整体框架 </p><h4 id="Fork-x2F-Join模型"><a href="#Fork-x2F-Join模型" class="headerlink" title="Fork&#x2F;Join模型"></a>Fork&#x2F;Join模型</h4><p>这个模型其实就是一种分治思想 将任务不断分解成小的任务 执行完成之后将任务结果汇总 Fork操作就是分割任务 Join操作就是合并结果 其实车不多就是和合并排序的做法 相似</p><p>就像这个图 任务-1是总任务 fork分割 不断分割 ，然后分割的任务执行完成又join操作将任务结果一层层的向上传递 最终汇总为总任务的最终结果<br>￼<br>￼<br>￼<img src="/img/concurrency8.png"></p><h4 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h4><p>是一种服务器端的模型 能够处理多个客户端并发请求访问 需要非阻塞机制的支持 Reactor模型将服务器端的整个处理过程分成若干事件 然后事件分发器会检测事件并将事件分发给相应的处理器处理 每个处理器仅仅负责自己的事情 而且要让所有的处理器都不产生阻塞 理想状态下每个事件处理器都能充分利用cpu</p><p>如图 若干客户端访问服务器 reactor事件分发器检测事件并将各种事件分发到对应的处理器处理 这个过程中如果有带处理的时间存在 就可以让reactor线程不断往下执行 而不会阻塞在一个地方 所以效率高<br>￼<br>￼<br>￼<img src="/img/concurrency9.png"></p><h4 id="Proactor模型"><a href="#Proactor模型" class="headerlink" title="Proactor模型"></a>Proactor模型</h4><p>也是基于事件分发机制 但是Recator模型需要自己检测接收读写事件  一旦检测到可接受可读可写的事件就分发到各类处理器 但是Proactor模型是将分发器注册到操作系统内核 内核一旦完成某类事件就通知分发器 然后分发器再分发到各类处理器上&#x2F; 两者最大的不同是对IO的操作方式 Reactor是基于应用层发起的同步IO操作 但是Proactor是基于内核的异步IO操作 ，应用层先注册到内核并由内核负责事件通知 </p><p>首先应用层创建分发器Dispatcher并且注册到内核异步IO处理器中间 它能感知已经完成接收操作 已完成读操作 已完成写操作等事件<br>然后当有相应事件发生时内核会通知分发器 进而调用对应的处理Handler进行处理 如果Handler需要读写则可以直接对内核缓冲区进行操作 此时数据肯定是准备好的<br>￼<br>￼<br>￼<img src="/img/concurrency10.png"></p><h4 id="Actor模型"><a href="#Actor模型" class="headerlink" title="Actor模型"></a>Actor模型</h4><p>该模型实际提供了一种更高层次的并发语义 通过该模型我们可以通过Actor实体概念来进行并发编程 这些Actor之间通过邮箱传递消息 简单来说<br>就是每个Actor里面都有自己的状态 行为和邮箱 接收到消息后会执行相应的行为进行逻辑处理 然后最重要的是Actor之间是不共享状态的<br>Actor模型出现之后 就不必接触多线程和线程池之类的基础概念 只需要将重心放在逻辑处理和消息传递上面  这是一种简化并发编程的方式  Actor通过不共享状态和消息传递来屏蔽这些复杂的问题 </p><p>实际上 任何物体都可以抽象为Actor 每个actor都有自己的状态 行为和邮箱 由于Actor之间完全独立 切状态不共享 所以必须通过邮箱来传递消息 每个Actor实际上可以看成是一个轻量级的线程 所以每个Actor最多同时进行一个工作 然后还有个很重要的 消息的传递是异步并且消息不可变<br>￼<br>￼<br>￼<img src="/img/concurrency11.png"></p><h4 id="CSP模型"><a href="#CSP模型" class="headerlink" title="CSP模型"></a>CSP模型</h4><p>Csp模型就是通信顺序进程 看起来和Actor有点像 也是通过消息传递避免并发过程中的锁和同步的问题 从而简化并发编程  CSP模型主要有Processor和Channel两个概念 Processor表示执行任务顺序单元 Channel就是消息交互通道 可以传递数据消息  每个Processor之间相互独立<br>通过channel来通信 Actor模型中间每个Actor包含一个邮箱 是强耦合，但是CSP模型中间 Processor不包含Channel 他们之间是相互解耦的 </p><p>￼<br>￼<img src="/img/concurrency12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常见的并发模型-Fork-x2F-Join-Reactor-Proactor-Actor-CSP&quot;&gt;&lt;a href=&quot;#常见的并发模型-Fork-x2F-Join-Reactor-Proactor-Actor-CSP&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="基础知识" scheme="http://zhangming1994.github.io/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="博客阅读 并发基础" scheme="http://zhangming1994.github.io/tags/%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB-%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关系型数据库的瓶颈和优化</title>
    <link href="http://zhangming1994.github.io/2023/06/17/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%93%B6%E9%A2%88%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://zhangming1994.github.io/2023/06/17/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%93%B6%E9%A2%88%E5%92%8C%E4%BC%98%E5%8C%96/</id>
    <published>2023-06-17T13:28:53.000Z</published>
    <updated>2023-06-18T06:38:58.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><pre><code>数据库大致可以分为传统的关系型数据库 mysql oracle sqlserver postgresql等</code></pre><p>非关系型数据库 hbase(列式数据库) mongodb 文档型数据库 redis 高性能kv存储 lucene 搜索引擎等</p><p>数据库查询开销</p><p>￼<img src="/img/1.png"></p><p>这个中间耗时操作有 建立TCP链接 生成执行计划 开表 从磁盘扫描数据 关闭链接</p><p>在mysql中间 主键查询是最为高效的一类查询 </p><p>索引字段如果太长 会导致order by无法在内存中见完成排序 使用mysql磁盘排序 并没有使用索引的排序</p><p>在mysql中间 数据按照页的方式来组织 默认大小16KB 包括页头 页尾 中间是记录<br>如果表中间存在大字段 达到了甚至超过了单页的大小 这个时候db就会新开一个数据页 当前页通过指针指向该页 一页不够 就会不断增加数据页直到可以存下为止 那么这个时候查询开销是很大的  严重的时候导致热页换出 引起系统抖动 ， </p><p>用了缓存 可能会有 缓存命中 缓存穿透 缓存失效 缓存一致性问题 </p><p>读写分离的原理就是将数据库读写操作分散到不同的节点上 </p><p>￼<img src="/img/2.png"></p><ol><li>数据库服务器搭建主从集群 主负责写操作 从负责读操作  主复制将数据同步到从<br>引入读写分离之后 可能导致 主从复制延迟 分配机制问题</li></ol><p>主从复制延迟可能达到秒级别 如果数据量大 可能达到分钟级别<br>读写操作区分 访问不同数据库 一般有两种方式： 程序代码封装 或者 中间件封装<br>程序代码封装：<br>￼<br><img src="/img/3.png"></p><p>这个做法无法多语言通用 主从切换 需要手动修改配置 </p><p>中间件封装：<br>地理一套系统出来 实现读写分离和数据库服务器连接的管理 中间件对业务服务器提供sql兼容的协议 业务服务器无需自己进行读写分离 </p><p>￼<img src="/img/4.png"></p><p>读写分离 分散了读写的压力 但是没有分散存储的压力 当数据量上来之后 单台数据库服务器的存储能力就会变成瓶颈 读写能力下降 数据文件备份和恢复困难</p><p>垂直分表： 将表中间不常用的占用大量空间的列拆分出去 代价是操作表的数量增加<br>水平拆分： 适合行数较大的表 会导致更多的复杂度 join count等 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库分类&quot;&gt;&lt;a href=&quot;#数据库分类&quot; class=&quot;headerlink&quot; title=&quot;数据库分类&quot;&gt;&lt;/a&gt;数据库分类&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;数据库大致可以分为传统的关系型数据库 mysql oracle sqlserver postgres</summary>
      
    
    
    
    <category term="数据库" scheme="http://zhangming1994.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://zhangming1994.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhangming1994.github.io/2022/08/17/hello-world/"/>
    <id>http://zhangming1994.github.io/2022/08/17/hello-world/</id>
    <published>2022-08-17T09:23:37.000Z</published>
    <updated>2023-06-18T06:05:57.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成新的文章"><a href="#生成新的文章" class="headerlink" title="生成新的文章"></a>生成新的文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="常用命令-注意以下命令需要切换到blog文件夹-cd-blog-执行"><a href="#常用命令-注意以下命令需要切换到blog文件夹-cd-blog-执行" class="headerlink" title="常用命令[注意以下命令需要切换到blog文件夹(cd blog)执行]"></a>常用命令[注意以下命令需要切换到blog文件夹(cd blog)执行]</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章名称&quot;  =&gt; hexo new &quot;文章名称&quot;  #这两个都是创建新文章，前者是简写模式，下同，new后面加一个draft可以生成草稿</span><br><span class="line">hexo p  =&gt; hexo publish  # 发布草稿</span><br><span class="line">hexo g  =&gt; hexo generate  # 生成</span><br><span class="line">hexo s  =&gt; hexo server  # 启动服务预览</span><br><span class="line">hexo d  =&gt; hexo deploy  # 部署</span><br><span class="line"> </span><br><span class="line">hexo server   # Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line">hexo server -s   # 静态模式</span><br><span class="line">hexo server -p 5000   #更 改端口</span><br><span class="line">hexo server -i 192.168.1.1   # 自定义IP</span><br><span class="line">hexo clean   # 清除缓存，网页正常情况下可以忽略此条命令</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;生成新的文章&quot;&gt;&lt;a href=&quot;#生成新的文章&quot; class=&quot;headerlink&quot; title=&quot;生成新的文章&quot;&gt;&lt;/a&gt;生成新的文章&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
  </entry>
  
</feed>
